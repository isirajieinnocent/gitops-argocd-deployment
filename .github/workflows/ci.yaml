name: CI/CD Pipeline for Helm + ArgoCD App-of-Apps

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: time-printer
  HELM_CHART_PATH: src/helm/my-app

permissions:
  contents: write
  security-events: write

jobs:
  build-and-push:
    name: Build and Push Container Image
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ github.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker Layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | \
          docker login ghcr.io \
            -u ${{ secrets.GHCR_USERNAME }} \
            --password-stdin

      - name: Build and Push Image
        uses: docker/build-push-action@v4
        with:
          context: ./src/app
          push: true
          tags: |
            ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ env.IMAGE_NAME }}:latest
            ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
          sbom: true
          provenance: true

      - name: Update Build Cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  update-helm-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Helm Repository
        uses: actions/checkout@v3
        with:
          repository: isirajieinnocent/gitops-argocd-deployment
          token: ${{ secrets.GITHUB_TOKEN }}
          path: helm-repo

      - name: Update Image Tag in values.yaml
        run: |
          cd helm-repo
          yq eval -i ".image.tag = \"${{ github.sha }}\"" ${{ env.HELM_CHART_PATH }}/values.yaml
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          git add ${{ env.HELM_CHART_PATH }}/values.yaml
          git commit -m "CI: Update image tag to ${{ github.sha }} [skip ci]"
          
          # Retry logic for push
          for i in {1..3}; do
            if git push; then
              break
            fi
            sleep 5
            git pull --rebase
          done

  sync-argocd:
    name: Sync ArgoCD Application
    runs-on: ubuntu-latest
    needs: update-helm-chart
    steps:
      - name: Install ArgoCD CLI
        run: |
          curl -sSL -o argocd \
            https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/

      - name: Verify ArgoCD Server Connectivity
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
        run: |
          SERVER_HOST=$(echo "$ARGOCD_SERVER" | cut -d: -f1)
          SERVER_PORT=$(echo "$ARGOCD_SERVER" | cut -d: -f2)
          
          echo "Waiting for ArgoCD server at $SERVER_HOST:$SERVER_PORT..."
          timeout 60 bash -c 'until nc -z $SERVER_HOST $SERVER_PORT; do sleep 2; done'

      - name: Authenticate with ArgoCD
        env:
          ARGOCD_SERVER: ${{ secrets.ARGOCD_SERVER }}
          ARGOCD_USERNAME: ${{ secrets.ARGOCD_USERNAME }}
          ARGOCD_PASSWORD: ${{ secrets.ARGOCD_PASSWORD }}
        run: |
          for attempt in {1..5}; do
            if argocd login "$ARGOCD_SERVER" \
              --username "$ARGOCD_USERNAME" \
              --password "$ARGOCD_PASSWORD" \
              --insecure \
              --grpc-web; then
              echo "Login successful"
              break
            fi
            echo "Attempt $attempt failed, retrying in 5 seconds..."
            sleep 5
          done
          
          argocd account get-user-info

      - name: Sync Application
        run: |
          argocd app sync ${{ env.IMAGE_NAME }} \
            --timeout 300 \
            --prune \
            --force
          
          argocd app wait ${{ env.IMAGE_NAME }} \
            --health \
            --timeout 600

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login to GitHub Container Registry
        run: |
          echo "${{ secrets.GHCR_TOKEN }}" | \
          docker login ghcr.io \
            -u ${{ secrets.GHCR_USERNAME }} \
            --password-stdin

      - name: Run Trivy Vulnerability Scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ secrets.GHCR_USERNAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          severity: HIGH,CRITICAL
          exit-code: 0

      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  notify:
    name: Send Notification
    runs-on: ubuntu-latest
    needs: sync-argocd
    if: always()
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
          SLACK_TITLE: "Deployment ${{ job.status }} - ${{ env.IMAGE_NAME }}"
          SLACK_MESSAGE: |
            *Status:* ${{ job.status }}
            *Commit:* `${{ github.sha }}`
            *Environment:* Production
            *ArgoCD App:* ${{ env.IMAGE_NAME }}
            *Build Logs:* ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          SLACK_USERNAME: GitHub Actions
          SLACK_ICON_EMOJI: rocket